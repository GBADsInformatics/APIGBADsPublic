on:
  push:
    branches: [ "main" , "master" ]

  workflow_dispatch:

name: Build & Deploy

jobs:
  commit-hash:
    name: Commit SHA
    runs-on: ubuntu-latest
    outputs:
      sha7: ${{ steps.commit-hash.outputs.sha7 }}
    steps:
      - name: Get Commit SHA
        id: commit-hash
        run: echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> "$GITHUB_OUTPUT"

  docker:
    uses: GBADsInformatics/DevopsWorkflows/.github/workflows/docker.yml@v2.0
    secrets: inherit
    with:
      IMAGE_NAME: api

  fetch-secret:
    name: Fetch API Secret
    runs-on: ubuntu-latest
    needs: [commit-hash]
    outputs:
      dpm-token: ${{ steps.get-secret.outputs.secret }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get secret from Secrets Manager
        id: get-secret
        run: |
          SECRET=$(aws secretsmanager get-secret-value \
            --secret-id api/dpm_authorization_token \
            --query SecretString \
            --output text)
          echo "secret=$SECRET" >> "$GITHUB_OUTPUT"

  aws:
    needs: [commit-hash, docker]
    uses: GBADsInformatics/DevopsWorkflows/.github/workflows/aws.yml@v2.0
    secrets:
      template-input: >-
        ApplicationName=api,
        DockerURI=gbadsinformatics/api:${{ needs.commit-hash.outputs.sha7 }},
        BaseURL=/api,
        ListenerRulePriority=2,
        RdsPublicHost=${{ secrets.RDS_PUBLIC_HOST }},
        RdsPublicName=${{ secrets.RDS_PUBLIC_NAME }},
        RdsPublicUser=${{ secrets.RDS_PUBLIC_USER }},
        RdsPublicPass=${{ secrets.RDS_PUBLIC_PASS }},
        S3USERKEY=${{ secrets.S3_USER_KEY }},
        S3USERSECRET=${{ secrets.S3_USER_SECRET }},
        S3USERREGION=${{ secrets.S3_USER_REGION }}
        DpmAuthentication=${{ needs.fetch-secret.outputs.dpm-token }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    with:
      stack-name: api-stack
